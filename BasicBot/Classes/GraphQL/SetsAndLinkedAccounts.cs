// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BasicBot.GraphQL.SetsAndLinkedAccounts;
//
//    var setsAndLinkedAccounts = SetsAndLinkedAccounts.FromJson(jsonString);

namespace BasicBot.GraphQL.SetsAndLinkedAccounts
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SetsAndLinkedAccounts
    {
        [JsonProperty("data")]
        public Data Data { get; set; }

        [JsonProperty("extensions")]
        public Extensions Extensions { get; set; }

        [JsonProperty("actionRecords")]
        public List<object> ActionRecords { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("currentUser")]
        public CurrentUser CurrentUser { get; set; }

        [JsonProperty("event")]
        public Event Event { get; set; }
    }

    public partial class CurrentUser
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public string Id { get; set; }
    }

    public partial class Event
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public string Id { get; set; }

        [JsonProperty("tournament")]
        public Tournament Tournament { get; set; }

        [JsonProperty("sets")]
        public Sets Sets { get; set; }
    }

    public partial class Sets
    {
        [JsonProperty("nodes")]
        public List<Node> Nodes { get; set; }
    }

    public partial class Node
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public string Id { get; set; }

        [JsonProperty("totalGames")]
        public long TotalGames { get; set; }

        [JsonProperty("state")]
        public long State { get; set; }

        [JsonProperty("games")]
        public List<Game> Games { get; set; }

        [JsonProperty("slots")]
        public List<Slot> Slots { get; set; }
        
        [JsonProperty("winnerId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public string WinnerId { get; set; }
    }

    public partial class Game
    {
        [JsonProperty("winnerId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public string WinnerId { get; set; }

        [JsonProperty("orderNum")]
        public long OrderNum { get; set; }

        [JsonProperty("stage")]
        public string Stage { get; set; }
    }

    public partial class Slot
    {
        [JsonProperty("entrant")]
        public Entrant Entrant { get; set; }
    }

    public partial class Entrant
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public string Id { get; set; }
        
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("participants")]
        public List<Participant> Participants { get; set; }
    }

    public partial class Participant
    {
        [JsonProperty("gamerTag")]
        public string GamerTag { get; set; }

        [JsonProperty("requiredConnections")]
        public List<RequiredConnection> RequiredConnections { get; set; }
    }

    public partial class RequiredConnection
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("externalId")]
        public string ExternalId { get; set; }

        [JsonProperty("externalUsername")]
        public string ExternalUsername { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }
    }

    public partial class Tournament
    {
        [JsonProperty("admins")]
        public List<Admin> Admins { get; set; }
    }

    public partial class Admin
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public string Id { get; set; }
    }

    public partial class Extensions
    {
        [JsonProperty("cacheControl")]
        public CacheControl CacheControl { get; set; }

        [JsonProperty("queryComplexity")]
        public long QueryComplexity { get; set; }
    }

    public partial class CacheControl
    {
        [JsonProperty("version")]
        public long Version { get; set; }

        [JsonProperty("hints")]
        public List<Hint> Hints { get; set; }
    }

    public partial class Hint
    {
        [JsonProperty("path")]
        public List<string> Path { get; set; }

        [JsonProperty("maxAge")]
        public long MaxAge { get; set; }

        [JsonProperty("scope")]
        public string Scope { get; set; }
    }

    public enum TypeEnum { Discord, Mixer, Steam, Twitch, Twitter, Xbox };

    public partial class SetsAndLinkedAccounts
    {
        public static SetsAndLinkedAccounts FromJson(string json) => JsonConvert.DeserializeObject<SetsAndLinkedAccounts>(json, BasicBot.GraphQL.SetsAndLinkedAccounts.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SetsAndLinkedAccounts self) => JsonConvert.SerializeObject(self, BasicBot.GraphQL.SetsAndLinkedAccounts.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string) || t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            return value;
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            serializer.Serialize(writer, untypedValue.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DISCORD":
                    return TypeEnum.Discord;
                case "MIXER":
                    return TypeEnum.Mixer;
                case "STEAM":
                    return TypeEnum.Steam;
                case "TWITCH":
                    return TypeEnum.Twitch;
                case "TWITTER":
                    return TypeEnum.Twitter;
                case "XBOX":
                    return TypeEnum.Xbox;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Discord:
                    serializer.Serialize(writer, "DISCORD");
                    return;
                case TypeEnum.Mixer:
                    serializer.Serialize(writer, "MIXER");
                    return;
                case TypeEnum.Steam:
                    serializer.Serialize(writer, "STEAM");
                    return;
                case TypeEnum.Twitch:
                    serializer.Serialize(writer, "TWITCH");
                    return;
                case TypeEnum.Twitter:
                    serializer.Serialize(writer, "TWITTER");
                    return;
                case TypeEnum.Xbox:
                    serializer.Serialize(writer, "XBOX");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
